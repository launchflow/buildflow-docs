"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[6168],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(r),f=i,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return r?n.createElement(m,l(l({ref:t},c),{},{components:r})):n.createElement(m,l({ref:t},c))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,l=new Array(o);l[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:i,l[1]=a;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4333:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const o={},l="Pulse",a={unversionedId:"reference/primitives/local/pulse",id:"reference/primitives/local/pulse",title:"Pulse",description:"Pulse is a source primitive that can be used to periodically send data to your pipeline. This can be useful for testing or for creating a periodic job.",source:"@site/docs/reference/primitives/local/pulse.md",sourceDirName:"reference/primitives/local",slug:"/reference/primitives/local/pulse",permalink:"/docs/reference/primitives/local/pulse",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/local/pulse.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"File Change Stream",permalink:"/docs/reference/primitives/local/file_change_stream"},next:{title:"Portable",permalink:"/docs/category/portable"}},s={},p=[{value:"Types",id:"types",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pulse"},"Pulse"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Pulse")," is a source primitive that can be used to periodically send data to your pipeline. This can be useful for testing or for creating a periodic job."),(0,i.kt)("p",null,"To create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Pulsing")," source provide:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"items")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": The items to be sent. Will start from the first item in the list and iterate through. When the end of the list is hit it will start over."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pulse_interval_seconds"),"  ",(0,i.kt)("strong",{parentName:"li"},"required"),": Number of seconds to wait in-between sending items")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom buildflow.io.local import Pulse\n\n@app.pipeline(source=Pulse([1, 2, 3], pulse_interval_seconds=1), sink=...)\ndef process(elem: int):\n    ...\n")),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,"The input type to your processor will be whatever you provided in the ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," list."))}d.isMDXComponent=!0}}]);