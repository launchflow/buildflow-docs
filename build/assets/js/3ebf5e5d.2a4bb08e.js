"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[748],{3905:(e,r,l)=>{l.d(r,{Zo:()=>s,kt:()=>v});var t=l(7294);function i(e,r,l){return r in e?Object.defineProperty(e,r,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[r]=l,e}function n(e,r){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),l.push.apply(l,t)}return l}function o(e){for(var r=1;r<arguments.length;r++){var l=null!=arguments[r]?arguments[r]:{};r%2?n(Object(l),!0).forEach((function(r){i(e,r,l[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):n(Object(l)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(l,r))}))}return e}function a(e,r){if(null==e)return{};var l,t,i=function(e,r){if(null==e)return{};var l,t,i={},n=Object.keys(e);for(t=0;t<n.length;t++)l=n[t],r.indexOf(l)>=0||(i[l]=e[l]);return i}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)l=n[t],r.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(i[l]=e[l])}return i}var p=t.createContext({}),u=function(e){var r=t.useContext(p),l=r;return e&&(l="function"==typeof e?e(r):o(o({},r),e)),l},s=function(e){var r=u(e.components);return t.createElement(p.Provider,{value:r},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var l=e.components,i=e.mdxType,n=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),d=u(l),m=i,v=d["".concat(p,".").concat(m)]||d[m]||c[m]||n;return l?t.createElement(v,o(o({ref:r},s),{},{components:l})):t.createElement(v,o({ref:r},s))}));function v(e,r){var l=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var n=l.length,o=new Array(n);o[0]=m;var a={};for(var p in r)hasOwnProperty.call(r,p)&&(a[p]=r[p]);a.originalType=e,a[d]="string"==typeof e?e:i,o[1]=a;for(var u=2;u<n;u++)o[u]=l[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,l)}m.displayName="MDXCreateElement"},5092:(e,r,l)=>{l.r(r),l.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>n,metadata:()=>a,toc:()=>u});var t=l(7462),i=(l(7294),l(3905));const n={},o="Provider API",a={unversionedId:"apis/providers/base",id:"apis/providers/base",title:"Provider API",description:"Providers implement the logic for setting up and interacting with other systems and resources (ResourceTypes). There are multiple types of Providers and each type is responsible for a single task (i.e. a PullProvider only needs to provide a pull method).",source:"@site/docs/apis/providers/base.md",sourceDirName:"apis/providers",slug:"/apis/providers/base",permalink:"/docs/apis/providers/base",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/apis/providers/base.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Node API",permalink:"/docs/apis/node"},next:{title:"Google Pub/Sub Providers",permalink:"/docs/apis/providers/gcp/gcp_pubsub"}},p={},u=[{value:"All Available Providers",id:"all-available-providers",level:2},{value:"Local",id:"local",level:3},{value:"GCP",id:"gcp",level:3},{value:"All Available Providers",id:"all-available-providers-1",level:2},{value:"PullProvider",id:"pullprovider",level:3},{value:"PushProvider",id:"pushprovider",level:3},{value:"PulumiProvider",id:"pulumiprovider",level:3}],s={toc:u},d="wrapper";function c(e){let{components:r,...l}=e;return(0,i.kt)(d,(0,t.Z)({},s,l,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"provider-api"},"Provider API"),(0,i.kt)("p",null,"Providers implement the logic for setting up and interacting with other systems and resources (ResourceTypes). There are multiple types of Providers and each type is responsible for a single task (i.e. a PullProvider only needs to provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," method). "),(0,i.kt)("h2",{id:"all-available-providers"},"All Available Providers"),(0,i.kt)("h3",{id:"local"},"Local"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./local/file_provider#fileprovider"},"FileProvider")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./local/pulse_provider#pulsingprovider"},"PulsingProvider"))),(0,i.kt)("h3",{id:"gcp"},"GCP"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./gcp/gcp_bigquery#streamingbigqueryprovider"},"StreamingBigQueryProvider")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./gcp/gcp_pubsub#gcppubsubsubscriptionprovider"},"GCPPubSubSubscriptionProvider")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./gcp/gcp_pubsub#gcppubsubtopicprovider"},"GCPPubSubTopicProvider")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./gcp/gcp_storage#gcsfilestreamprovider"},"GCSFileStreamProvider"))),(0,i.kt)("h2",{id:"all-available-providers-1"},"All Available Providers"),(0,i.kt)("h3",{id:"pullprovider"},"PullProvider"),(0,i.kt)("p",null,"PullProviders are used to ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," data from a Source and optionally ",(0,i.kt)("inlineCode",{parentName:"p"},"ack")," completion of work, typically in a streaming runtime."),(0,i.kt)("p",null,"Required methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"pull")),(0,i.kt)("p",null,"Optional methods (unlocks more Runtime features):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ack"),(0,i.kt)("li",{parentName:"ul"},"backlog"),(0,i.kt)("li",{parentName:"ul"},"pull_converter")),(0,i.kt)("p",null,"Example PullProvider:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from buildflow.io.providers import PullProvider, PullResponse, AckInfo\n\nclass MyProvider(PullProvider):\n\n    async def pull(self) -> PullResponse:\n        ...\n\n    async def ack(self, to_ack: AckInfo):\n        ...\n")),(0,i.kt)("h3",{id:"pushprovider"},"PushProvider"),(0,i.kt)("p",null,"PushProviders are used to ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," data to a Sink."),(0,i.kt)("p",null,"Required methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"push")),(0,i.kt)("p",null,"Optional methods (unlocks more Runtime features):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"push_converter")),(0,i.kt)("p",null,"Example PushProvider:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from buildflow.io.providers import PushProvider, PushResponse, BatchType\n\nclass MyProvider(PushProvider):\n\n    async def push(self, batch: BatchType) -> PushResponse:\n        ...\n")),(0,i.kt)("h3",{id:"pulumiprovider"},"PulumiProvider"),(0,i.kt)("p",null,"PulumiProviders are used to create infrastructure using Pulumi."),(0,i.kt)("p",null,"Required methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"pulumi")),(0,i.kt)("p",null,"Optional methods (unlocks more Runtime features):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"push_converter")),(0,i.kt)("p",null,"Example PulumiProvider:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from typing import Optional, Type\nfrom buildflow.io.providers import PulumiProvider, PulumiResources\nfrom pulumi_gcp import storage\n\nclass MyProvider(PulumiProvider):\n\n    def pulumi(self, type_: Optional[Type]) -> PulumiResources:\n        return PulumiResources([storage.Bucket('my-bucket')])\n")))}c.isMDXComponent=!0}}]);