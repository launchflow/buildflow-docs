"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[8113],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(r),m=i,d=u["".concat(p,".").concat(m)]||u[m]||f[m]||a;return r?n.createElement(d,l(l({ref:t},s),{},{components:r})):n.createElement(d,l({ref:t},s))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8479:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const a={},l="File",o={unversionedId:"reference/primitives/local/file",id:"reference/primitives/local/file",title:"File",description:"File is a sink primitive that can be used to write data to a file. The sink primitive takes in a file path and will create one unique file per replica. To create a File provide the",source:"@site/docs/reference/primitives/local/file.md",sourceDirName:"reference/primitives/local",slug:"/reference/primitives/local/file",permalink:"/docs/reference/primitives/local/file",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/local/file.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Local",permalink:"/docs/category/local"},next:{title:"File Change Stream",permalink:"/docs/reference/primitives/local/file_change_stream"}},p={},c=[{value:"Types",id:"types",level:2}],s={toc:c},u="wrapper";function f(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"file"},"File"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"File")," is a sink primitive that can be used to write data to a file. The sink primitive takes in a file path and will create one unique file per replica. To create a ",(0,i.kt)("inlineCode",{parentName:"p"},"File")," provide the "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_path")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": the base path of the file to write to. We will take this path and generate a unique file path for each replica in the following format: ",(0,i.kt)("inlineCode",{parentName:"li"},"{file_path}-{uuid}.{extension}")," "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_format")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": format of the file ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The supported formats are:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"JSON"),(0,i.kt)("li",{parentName:"ul"},"CSV"),(0,i.kt)("li",{parentName:"ul"},"parquest")))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.local import File\n\n@app.pipeline(source=..., sink=File(file_path="path.csv", file_format="csv"))\ndef process(elem: MyType):\n    ...\n')),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"File")," sink expects an object that can be serialized in to a JSON object. You can return a ",(0,i.kt)("inlineCode",{parentName:"p"},"dataclass")," and we will automatically serialize it for you, or you can return a dictionary containing JSON serializable objects."),(0,i.kt)("p",null,"If you would like to return a custom type that is not JSON serializable you can implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"to_json")," method on your class and we will use that to serialize your object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\nclass CustomType:\n    def __init__(self, b: int):\n        self.b = str\n\n    def to_json(self):\n        return {"b": self.b}\n\n@app.processor(source=ResourceType(...), sink=Files(...))\nasync def my_processor(elem: int) -> CustomType:\n    return CustomType(b=elem + 1)\n')))}f.isMDXComponent=!0}}]);