"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[943],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7520:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Install",l={unversionedId:"install",id:"install",title:"Install",description:"BuildFlow, is an open source framework for building large scale systems using Python. All you need to do is describe where your input is coming from and where your output should be written, and BuildFlow handles the rest. No configuration outside of the code is required.",source:"@site/docs/install.md",sourceDirName:".",slug:"/install",permalink:"/docs/install",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/install.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mainSidebar",previous:{title:"Concepts",permalink:"/docs/what_is_buildflow/concepts"},next:{title:"Quickstart",permalink:"/docs/quickstart"}},s={},u=[{value:"Quickstart",id:"quickstart",level:2},{value:"Install",id:"install-1",level:3},{value:"Basic Example Usage",id:"basic-example-usage",level:3},{value:"Example Usage with Custom Configuration",id:"example-usage-with-custom-configuration",level:3},{value:"Windows Users",id:"windows-users",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"install"},"Install"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"BuildFlow"),", is an open source framework for building large scale systems using Python. All you need to do is describe where your input is coming from and where your output should be written, and BuildFlow handles the rest. ",(0,a.kt)("strong",{parentName:"p"},"No configuration outside of the code is required"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Source Code"),": ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/launchflow/buildflow"},"https://github.com/launchflow/buildflow")),(0,a.kt)("p",null,"Key Features (all provided out-of-the-box):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Automatic ",(0,a.kt)("a",{parentName:"li",href:"/docs/what_is_buildflow/concepts#resourcetype"},"resource creation / management")," (Infrastructure as Code) powered by ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/pulumi/pulumi"},"Pulumi")),(0,a.kt)("li",{parentName:"ul"},"Automatic parallelism / concurrency powered by ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ray-project/ray"},"Ray")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/autoscaling"},"Dynamic autoscaling"),": scale up during high traffic / reduce costs during low traffic"),(0,a.kt)("li",{parentName:"ul"},"Production-grade ",(0,a.kt)("a",{parentName:"li",href:"io-providers/overview"},"I/O Providers")," for popular cloud services & storage systems",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Multi-step I/O Providers for common use cases (e.g. ",(0,a.kt)("a",{parentName:"li",href:"io-providers/gcs_notifications"},"file upload notifications"),")"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"schema-validation"},"Schema validation")," powered by Python dataclasses and type hints")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"BuildFlow")," is currently in beta. The first stable version will be released alongside the ",(0,a.kt)("a",{parentName:"p",href:"https://www.launchflow.com/"},"LaunchFlow VSCode Extension")," in summer 2023. Please join our ",(0,a.kt)("a",{parentName:"p",href:"https://discordapp.com/invite/wz7fjHyrCA"},"Discord")," if you have any questions or feedback.")),(0,a.kt)("h2",{id:"quickstart"},"Quickstart"),(0,a.kt)("h3",{id:"install-1"},"Install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install buildflow\n")),(0,a.kt)("h3",{id:"basic-example-usage"},"Basic Example Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from buildflow import Node\nfrom buildflow.io import GCPPubSubSubscription, BigQueryTable\n\n\n# Step 1. Create a BuildFlow Node (app) and define your input / output(s)\napp = Node()\n\n# NOTE: A Subscription will automatically be created in the billing project\nsource = GCPPubSubSubscription(topic='TODO', billing_project='TODO')\n# NOTE: A BigQuery Table will be automatically created using the\nsink = BigQuerySink(table_id='TODO')\n\n\n# Step 2. Create a Processor that reads from Google PubSub and writes to BigQuery\n@app.processor(source=source, sink=sink)\ndef process_message(pubsub_message):\n  # TODO(developer): Implement processing logic\n  ...\n  # The output is automatically sent to the sink provider\n  return {...}\n\n\n# Step 3. Start the BuildFlow app's Runtime\napp.run()\n")),(0,a.kt)("p",null,"For more in-depth tutorials, see our walkthroughs."),(0,a.kt)("h3",{id:"example-usage-with-custom-configuration"},"Example Usage with Custom Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from dataclasses import dataclass\n\nfrom buildflow import Node, RuntimeConfig, InfraConfig, SchemaValidation\nfrom buildflow.io import GCPPubSubSubscription, BigQueryTable\n\n\n# Optional: Use dataclasses and BuildFlow will perform schema validation checks\n@dataclass\nclass InputSchema:\n    field: str\n\n@dataclass\nclass OutputSchema:\n    other: int\n\n\n# Optional: Configure the Runtime & Infra submodules for your use case.\n# All BuildFlow configs have class method for common use cases.\nruntime_config = RuntimeConfig.IO_BOUND(autoscale=True)\n# You can also set the values directly\ninfra_config = InfraConfig(\n    schema_validation=SchemaValidation.STRICT,\n    require_confirmation=True,\n    log_level=\"INFO\",\n)\n\n# Step 1. Create a BuildFlow Node (app) and define your input / output(s)\napp = Node(runtime_config=runtime_config, infra_config=infra_config)\n\n# NOTE: A Subscription will automatically be created in the billing project\nsource = GCPPubSubSubscription(topic='TODO', billing_project='TODO')\n# NOTE: A BigQuery Table will be automatically created using the\nsink = BigQuerySink(table_id='TODO')\n\n\n# Step 2. Create a Processor that reads from Google PubSub and writes to BigQuery\n@app.processor(\n  source=source,\n  sink=sink,\n  # Optional: Configure your processor's replica options. In this case, we will run\n  # 2 replicas per CPU core, and each replica will run 8 tasks concurrently.\n  num_cpus=0.5,\n  num_concurrency=8,\n)\ndef process_message(pubsub_message: InputSchema) -> OutputSchema:\n  # TODO(developer): Implement processing logic\n  ...\n  # The output is automatically sent to the sink provider\n  return OutputSchema(...)\n\n\n# Step 3. Start the BuildFlow app's Runtime\napp.run(\n  # Optional: Set infra options for this run. In this case, we will create the\n  # PubSub Subscription and BigQuery Tables on start, and will delete them\n  # once the run is complete. This can be useful for integration tests, or when\n  # trying out new cloud services.\n  apply_infrastructure: bool = True,\n  destroy_infrastructure: bool = True,\n)\n")),(0,a.kt)("p",null,"For more in-depth tutorials, see our walkthroughswalkthroughs."),(0,a.kt)("h2",{id:"windows-users"},"Windows Users"),(0,a.kt)("p",null,"Our runtime is built on ",(0,a.kt)("a",{parentName:"p",href:"https://ray.io/"},"Ray"),", where Windows support is currently in beta. See the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/ray-overview/installation.html#windows-support"},"Ray docs")," for more info."))}d.isMDXComponent=!0}}]);