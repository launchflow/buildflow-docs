"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[3046],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(n),d=a,f=c["".concat(u,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8385:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={},o="AWS SQS",s={unversionedId:"reference/primitives/aws/sqs",id:"reference/primitives/aws/sqs",title:"AWS SQS",description:"SQSQueue is a sink and source primitive that can be used to read and write messages to an SQS queue. To create a SQSQueue provide:",source:"@site/docs/reference/primitives/aws/sqs.md",sourceDirName:"reference/primitives/aws",slug:"/reference/primitives/aws/sqs",permalink:"/docs/reference/primitives/aws/sqs",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/aws/sqs.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"AWS S3 Bucket",permalink:"/docs/reference/primitives/aws/s3"},next:{title:"S3 File Change Stream",permalink:"/docs/reference/primitives/aws/s3_file_change_stream"}},u={},l=[{value:"Types",id:"types",level:2},{value:"Resource Creation",id:"resource-creation",level:2},{value:"Configuration Options",id:"configuration-options",level:2}],p={toc:l},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aws-sqs"},"AWS SQS"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SQSQueue")," is a sink and source primitive that can be used to read and write messages to an SQS queue. To create a ",(0,a.kt)("inlineCode",{parentName:"p"},"SQSQueue")," provide:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"queue_name")," ",(0,a.kt)("strong",{parentName:"li"},"required"),": The name of the queue"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aws_region"),": The region the queue exists in"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aws_account_id"),": The account id the queue exists in")),(0,a.kt)("p",null,"Example sink usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.aws import SQSQueue\n\n@app.pipeline(source=..., sink=SQSQueue(\n    queue_name="queue_name",\n    aws_region="us-east-1",\n    aws_account_id="1234567890")\n)\n')),(0,a.kt)("p",null,"Example source usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.aws import SQSQueue\n\n@app.pipeline(sink=SQSQueue(\n        queue_name="queue_name",\n        aws_region="us-east-1",\n        aws_account_id="1234567890"),\n    source=...,\n)\n')),(0,a.kt)("p",null,":::"),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"SQSQueue")," sink expects an object that can be serialized into a string. You can return a ",(0,a.kt)("inlineCode",{parentName:"p"},"dataclass")," and we will automatically serialize it to JSON, or you can return a string object directly."),(0,a.kt)("p",null,"If you have a custom type you can implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"to_string")," method to return the bytes you want to send to SQS."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class CustomType:\n    def __init__(self, data: str):\n        self.data = str\n\n    def to_string(self):\n        return self.data\n\n@app.pipeline(source=..., sink=SQSQueue(...))\nasync def my_processor(elem: str) -> CustomType:\n    return CustomType(data=elem)\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"SQSSource")," source returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," object by default. However you can also provide us a type that you would like us to deserialize the string into. If you provide a dataclass we will automatically deserialize the string into a JSON object and then create your dataclass. If you provide a custom type you can implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"from_string")," method to deserialize the string into your type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class CustomType:\n    def __init__(self, data: str):\n        self.decoded_data = str\n\n    @classmethod\n    def from_string(cls, data: str):\n        return cls(data)\n\n@app.pipeline(source=SQSQueue(...), sink=...)\nasync def my_processor(elem: CustomType) -> CustomType:\n    return elem\n")),(0,a.kt)("h2",{id:"resource-creation"},"Resource Creation"),(0,a.kt)("p",null,"If you are using BuildFlow's built in resource creation/management you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"SQSQueue")," primitive to create a queue in your AWS account."),(0,a.kt)("h2",{id:"configuration-options"},"Configuration Options"),(0,a.kt)("p",null,"You can provide the following options to control resource management of the SQS queue:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"managed"),": Whether or not the topic is managed by BuildFlow. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"primitive = SQSQueue(...).options(managed=True)\n")))}m.isMDXComponent=!0}}]);