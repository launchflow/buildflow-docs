"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[3586],{3905:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>d});var t=n(7294);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=t.createContext({}),p=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},l=function(e){var r=p(e.components);return t.createElement(c.Provider,{value:r},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=s,d=u["".concat(c,".").concat(m)]||u[m]||y[m]||o;return n?t.createElement(d,a(a({ref:r},l),{},{components:n})):t.createElement(d,a({ref:r},l))}));function d(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var p=2;p<o;p++)a[p]=n[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},895:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var t=n(7462),s=(n(7294),n(3905));const o={},a="Async Processors",i={unversionedId:"user-guides/processors/async-processors",id:"user-guides/processors/async-processors",title:"Async Processors",description:"TL:DR; If you are using any libraries that require you to use await. You should make your pipeline async.",source:"@site/docs/user-guides/processors/async-processors.md",sourceDirName:"user-guides/processors",slug:"/user-guides/processors/async-processors",permalink:"/docs/user-guides/processors/async-processors",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/user-guides/processors/async-processors.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Stateful Processors",permalink:"/docs/user-guides/processors/stateful-processors"},next:{title:"Custom Types",permalink:"/docs/user-guides/processors/custom-types"}},c={},p=[{value:"Async With Ray",id:"async-with-ray",level:2}],l={toc:p},u="wrapper";function y(e){let{components:r,...n}=e;return(0,s.kt)(u,(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"async-processors"},"Async Processors"),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"TL:DR;")," If you are using any libraries that require you to use ",(0,s.kt)("inlineCode",{parentName:"p"},"await"),". You should make your pipeline async.")),(0,s.kt)("p",null,"All BuildFlow processors automatically run in an async runtime. So you can make your process async by simply adding the ",(0,s.kt)("inlineCode",{parentName:"p"},"async")," keyword."),(0,s.kt)("p",null,"For functions:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"\n@app.pipeline(source=Primitive(...), sink=Primitive(...))\nasync def my_pipeline(...):\n    ...\n\n")),(0,s.kt)("p",null,"For stateful pipelines:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@app.pipeline(source=Primitive(...), sink=Primitive(...))\nclass StatefulPipeline:\n    async def process(self, elem)\n        return self.model.classify(elem)    \n")),(0,s.kt)("h2",{id:"async-with-ray"},"Async With Ray"),(0,s.kt)("p",null,"The async run time is powered by Ray. This means you can use any of the functionality of ray core to add increased parallelism to your processor. This is recommended if you need to perform any long running or computationally expensive tasks in your processor."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"\n@ray.remote\ndef long_task(elem):\n    time.sleep(10)\n    return elem\n\n@app.pipeline(source=ResourceType(...), sink=ResourceType(...))\ndef my_processor(elem):\n    return await long_task.remote(elem)\n\n")))}y.isMDXComponent=!0}}]);