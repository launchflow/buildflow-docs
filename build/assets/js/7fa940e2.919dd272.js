"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[7939],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>b});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(r),m=n,b=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return r?a.createElement(b,l(l({ref:t},c),{},{components:r})):a.createElement(b,l({ref:t},c))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:n,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8403:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const i={},l="Analysis Table",o={unversionedId:"reference/primitives/portable/analysis_table",id:"reference/primitives/portable/analysis_table",title:"Analysis Table",description:"AnalyaisTable is a sink portable primitive type that can be used to write data to an analysis table.",source:"@site/docs/reference/primitives/portable/analysis_table.md",sourceDirName:"reference/primitives/portable",slug:"/reference/primitives/portable/analysis_table",permalink:"/docs/reference/primitives/portable/analysis_table",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/portable/analysis_table.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Queue",permalink:"/docs/reference/primitives/portable/queue"},next:{title:"Snowflake Table",permalink:"/docs/reference/primitives/snowflake"}},p={},s=[{value:"Types",id:"types",level:2},{value:"Resource Creation",id:"resource-creation",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"analysis-table"},"Analysis Table"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"AnalyaisTable")," is a sink ",(0,n.kt)("a",{parentName:"p",href:"/docs/user-guides/primitives/portable"},"portable primitive type")," that can be used to write data to an analysis table."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"table_id")," ",(0,n.kt)("strong",{parentName:"li"},"required"),": the unique identifier for the table")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"The ",(0,n.kt)("inlineCode",{parentName:"p"},"AnalysisTable")," portable primitive is currently only supported on GCP and Local.")),(0,n.kt)("p",null,"Example sink usage:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.portable import AnalysisTable\n\n@app.pipeline(sink=..., sink=AnalysisTable(table_id="..."))\n')),(0,n.kt)("h2",{id:"types"},"Types"),(0,n.kt)("p",null,"For primitive types we encourage you to use a type that can be serialized no matter what cloud provider you such as a ",(0,n.kt)("inlineCode",{parentName:"p"},"dataclass")," or a ",(0,n.kt)("inlineCode",{parentName:"p"},"dict"),"."),(0,n.kt)("p",null,"If you cannot for whatever reason. Please refer to the cloud specific analysis table implementations for what type should be used:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"GCP -> ",(0,n.kt)("a",{parentName:"li",href:"../gcp/gcp_bigquery"},"BigQueryTable")),(0,n.kt)("li",{parentName:"ul"},"Local -> ",(0,n.kt)("a",{parentName:"li",href:"../duckdb"},"DuckDB"))),(0,n.kt)("h2",{id:"resource-creation"},"Resource Creation"),(0,n.kt)("p",null,"What resources are created depends on what is in your ",(0,n.kt)("inlineCode",{parentName:"p"},"cloud_provider_config.yaml"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"GCP -> ",(0,n.kt)("a",{parentName:"li",href:"../gcp/gcp_pubsub"},"Pub/Sub")),(0,n.kt)("li",{parentName:"ul"},"Local -> ",(0,n.kt)("a",{parentName:"li",href:"../duckdb"},"DuckDB"))))}d.isMDXComponent=!0}}]);