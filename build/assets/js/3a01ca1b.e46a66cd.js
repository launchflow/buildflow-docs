"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[8325],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[c]="string"==typeof e?e:a,o[1]=u;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8028:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={},o="Queue",u={unversionedId:"reference/primitives/portable/queue",id:"reference/primitives/portable/queue",title:"Queue",description:"Queue is a sink and source portable primitive type that can be used to write and read data from a cloud agnostic queue.",source:"@site/docs/reference/primitives/portable/queue.md",sourceDirName:"reference/primitives/portable",slug:"/reference/primitives/portable/queue",permalink:"/docs/reference/primitives/portable/queue",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/portable/queue.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Portable",permalink:"/docs/category/portable"},next:{title:"Analysis Table",permalink:"/docs/reference/primitives/portable/analysis_table"}},l={},p=[{value:"Types",id:"types",level:2},{value:"Resource Creation",id:"resource-creation",level:2}],s={toc:p},c="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"queue"},"Queue"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Queue")," is a sink and source ",(0,a.kt)("a",{parentName:"p",href:"/docs/user-guides/primitives/portable"},"portable primitive type")," that can be used to write and read data from a cloud agnostic queue."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"queue_id")," ",(0,a.kt)("strong",{parentName:"li"},"required"),": the unique identifier for the queue")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"AnalysisTable")," portable primitive is currently only supported on GCP and AWS.")),(0,a.kt)("p",null,"Example source usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.portable import Queue\n\n@app.pipeline(source=Queue(queue_id="..."), sink=..)\n')),(0,a.kt)("p",null,"Example sink usage:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.portable import Queue\n\n@app.pipeline(sink=..., sink=Queue(queue_id="..."))\n')),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("p",null,"For primitive types we encourage you to use a type that can be serialized no matter what cloud provider you such as a ",(0,a.kt)("inlineCode",{parentName:"p"},"dataclass")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"dict"),"."),(0,a.kt)("p",null,"If you cannot for whatever reason. Please refer to the cloud specific queue implementations for what type should be used:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"AWS -> ",(0,a.kt)("a",{parentName:"li",href:"../aws/sqs"},"SQS")),(0,a.kt)("li",{parentName:"ul"},"GCP -> ",(0,a.kt)("a",{parentName:"li",href:"../gcp/gcp_pubsub"},"Pub/Sub"))),(0,a.kt)("h2",{id:"resource-creation"},"Resource Creation"),(0,a.kt)("p",null,"What resources are created depends on what is in your ",(0,a.kt)("inlineCode",{parentName:"p"},"cloud_provider_config.yaml"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"AWS -> ",(0,a.kt)("a",{parentName:"li",href:"../aws/sqs"},"SQS")),(0,a.kt)("li",{parentName:"ul"},"GCP -> ",(0,a.kt)("a",{parentName:"li",href:"../gcp/gcp_pubsub"},"Pub/Sub"))))}d.isMDXComponent=!0}}]);