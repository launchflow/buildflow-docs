"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[9597],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),f=o,m=c["".concat(s,".").concat(f)]||c[f]||d[f]||a;return r?n.createElement(m,l(l({ref:t},u),{},{components:r})):n.createElement(m,l({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5761:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={},l="Flows",i={unversionedId:"user-guides/flows/overview",id:"user-guides/flows/overview",title:"Flows",description:"A Flow is the entity that is run by BuildFlow, and is the container for any processors you would like to run together.",source:"@site/docs/user-guides/flows/overview.md",sourceDirName:"user-guides/flows",slug:"/user-guides/flows/overview",permalink:"/docs/user-guides/flows/overview",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/user-guides/flows/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"User Guides",permalink:"/docs/category/user-guides"},next:{title:"Flow Options",permalink:"/docs/user-guides/flows/flow-options"}},s={},p=[{value:"Create a New Application",id:"create-a-new-application",level:2},{value:"Attach Pipelines",id:"attach-pipelines",level:2},{value:"Flow Methods",id:"flow-methods",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"flows"},"Flows"),(0,o.kt)("p",null,"A Flow is the entity that is run by BuildFlow, and is the container for any ",(0,o.kt)("a",{parentName:"p",href:"../pipelines/overview"},"processors")," you would like to run together."),(0,o.kt)("h2",{id:"create-a-new-application"},"Create a New Application"),(0,o.kt)("p",null,"A flow is created by instantiating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Flow")," object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from buildflow import Node\n\napp = Flow()\n")),(0,o.kt)("h2",{id:"attach-pipelines"},"Attach Pipelines"),(0,o.kt)("p",null,"If you use a processor decorator, processors are automatically attached to your Node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"app = Flow()\n\n@app.pipeline(source=..., sink=...)\ndef processor(...):\n    ...\n")),(0,o.kt)("h2",{id:"flow-methods"},"Flow Methods"),(0,o.kt)("p",null,"There are several methods on the node for managing the node."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"run"),": runs your node and all processors it contains"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"drain"),": drains all processors and stops the node"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"apply"),": applys all infracture required by your node"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"destroy"),": destroys all infracture")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The BuildFlow CLI is a proxy for all of these methods, and you generally won't need to call these directly.")))}d.isMDXComponent=!0}}]);