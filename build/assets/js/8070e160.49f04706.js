"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[651],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(r),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return r?n.createElement(m,l(l({ref:t},c),{},{components:r})):n.createElement(m,l({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2257:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:1},l="BuildFlow Docs",i={unversionedId:"quickstart",id:"quickstart",title:"BuildFlow Docs",description:"BuildFlow is an open source framework that transforms any python function into a scalable data pipeline.",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/docs/quickstart",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/docs/quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"API & Concepts",permalink:"/docs/category/api--concepts"}},s={},u=[{value:"Quickstart",id:"quickstart",level:2},{value:"Install",id:"install",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Windows Users",id:"windows-users",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"buildflow-docs"},"BuildFlow Docs"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"BuildFlow")," is an open source framework that transforms any python function into a scalable data pipeline."),(0,o.kt)("p",null,"Key Features:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fast - Scalable multiprocessing powered by ",(0,o.kt)("a",{parentName:"li",href:"https://ray.io/"},"Ray")),(0,o.kt)("li",{parentName:"ul"},"Provides ready made IO connectors for popular cloud services"),(0,o.kt)("li",{parentName:"ul"},"Unified ",(0,o.kt)("strong",{parentName:"li"},"batch")," and ",(0,o.kt)("strong",{parentName:"li"},"streaming")," API")),(0,o.kt)("h2",{id:"quickstart"},"Quickstart"),(0,o.kt)("h3",{id:"install"},"Install"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install buildflow\n")),(0,o.kt)("h3",{id:"example-usage"},"Example Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Import the buildflow package\nfrom buildflow import Flow\n\n# Create the Flow object\nflow = Flow()\n\n# Define your input / output(s)\n@flow.processor(\n   input_ref=buildflow.PubSub(subscription='my_subscription'),\n   output_ref=buildflow.BigQuery(table_id='project.dataset.table'),\n)\ndef stream_processor(pubsub_message):\n  # TODO(developer): Implement processing logic\n  ...\n\n# Start the processor\nflow.run()\n")),(0,o.kt)("h2",{id:"windows-users"},"Windows Users"),(0,o.kt)("p",null,"Our runtime is built on ",(0,o.kt)("a",{parentName:"p",href:"https://ray.io/"},"Ray"),", where Windows support is currently in beta. See the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/ray-overview/installation.html#windows-support"},"Ray docs")," for more info."))}d.isMDXComponent=!0}}]);