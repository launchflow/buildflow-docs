"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[50],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),l=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(r),f=n,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||s;return r?o.createElement(m,i(i({ref:t},p),{},{components:r})):o.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:n,i[1]=a;for(var l=2;l<s;l++)i[l]=r[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9418:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=r(7462),n=(r(7294),r(3905));const s={sidebar_position:1},i="Processor API",a={unversionedId:"processor/processor-api",id:"processor/processor-api",title:"Processor API",description:"The Processor API is the main abstraction provided by BuildFlow. It contains all of the user's processing logic; There should be little to no IO logic in the processor.",source:"@site/docs/processor/processor-api.md",sourceDirName:"processor",slug:"/processor/processor-api",permalink:"/docs/processor/processor-api",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/docs/processor/processor-api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"API & Concepts",permalink:"/docs/category/api--concepts"},next:{title:"IO Connectors",permalink:"/docs/processor/io-connectors"}},c={},l=[{value:"Lifecycle Methods",id:"lifecycle-methods",level:2},{value:"source",id:"source",level:3},{value:"sink",id:"sink",level:3},{value:"setup",id:"setup",level:3}],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"processor-api"},"Processor API"),(0,n.kt)("p",null,"The Processor API is the main abstraction provided by BuildFlow. It contains all of the user's processing logic; There should be little to no IO logic in the processor."),(0,n.kt)("h2",{id:"lifecycle-methods"},"Lifecycle Methods"),(0,n.kt)("p",null,"A Processor contains 3 lifecycle methods that are executed by the runtime: ",(0,n.kt)("strong",{parentName:"p"},"source()"),", ",(0,n.kt)("strong",{parentName:"p"},"sink()"),", & ",(0,n.kt)("strong",{parentName:"p"},"setup()")),(0,n.kt)("h3",{id:"source"},"source"),(0,n.kt)("p",null,"This ",(0,n.kt)("strong",{parentName:"p"},"source")," static method defines the input reference for the processor."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import buildflow\n\nclass MyProcessor:\n  ...\n\n  @staticmethod\n  def source() -> buildflow.IO:\n    return buildflow.PubSub(subscription='...')\n\n")),(0,n.kt)("h3",{id:"sink"},"sink"),(0,n.kt)("p",null,"This ",(0,n.kt)("strong",{parentName:"p"},"sink")," static method defines the output reference for the processor."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import buildflow\n\nclass MyProcessor:\n  ...\n\n  @staticmethod\n  def source() -> buildflow.IO:\n    return buildflow.BigQuery(table_id='...')\n\n")),(0,n.kt)("h3",{id:"setup"},"setup"),(0,n.kt)("p",null,"This ",(0,n.kt)("strong",{parentName:"p"},"setup")," method contains any dependencies that need to be initialized ",(0,n.kt)("strong",{parentName:"p"},"for each worker"),". There are many python objects that are not serializable (eg: bigquery.Client) and thus need to be created after ","*",(0,n.kt)("strong",{parentName:"p"},"*","init","*","*"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import buildflow\nfrom tensorflow import keras\n\nclass MyProcessor:\n  ...\n\n  def setup(self) -> buildflow.IO:\n    self.my_model = keras.models.load_model('path/to/location')\n\n")))}d.isMDXComponent=!0}}]);