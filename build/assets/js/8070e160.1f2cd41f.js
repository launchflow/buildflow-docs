"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[651],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2257:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1},i="Quickstart",s={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"Install",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/docs/quickstart",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mainSidebar",previous:{title:"Install",permalink:"/docs/install"},next:{title:"Processor API",permalink:"/docs/apis/processor"}},l={},u=[{value:"Install",id:"install",level:2},{value:"Basic Example Usage",id:"basic-example-usage",level:2},{value:"Example Usage with Custom Configuration",id:"example-usage-with-custom-configuration",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quickstart"},"Quickstart"),(0,o.kt)("h2",{id:"install"},"Install"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install buildflow\n")),(0,o.kt)("h2",{id:"basic-example-usage"},"Basic Example Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from buildflow import Node\nfrom buildflow.io import GCPPubSubSubscription, BigQueryTable\n\n\n# Step 1. Create a BuildFlow Node (app) and define your input / output(s)\napp = Node()\n\n# NOTE: A Subscription will automatically be created in the billing project\nsource = GCPPubSubSubscription(topic='TODO', billing_project='TODO')\n# NOTE: A BigQuery Table will be automatically created using the\nsink = BigQuerySink(table_id='TODO')\n\n\n# Step 2. Create a Processor that reads from Google PubSub and writes to BigQuery\n@app.processor(source=source, sink=sink)\ndef process_message(pubsub_message):\n  # TODO(developer): Implement processing logic\n  ...\n  # The output is automatically sent to the sink provider\n  return {...}\n\n\n# Step 3. Start the BuildFlow app's Runtime\napp.run()\n")),(0,o.kt)("p",null,"For more in-depth tutorials, see our walkthroughs."),(0,o.kt)("h2",{id:"example-usage-with-custom-configuration"},"Example Usage with Custom Configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from dataclasses import dataclass\n\nfrom buildflow import Node, RuntimeConfig, InfraConfig, SchemaValidation\nfrom buildflow.io import GCPPubSubSubscription, BigQueryTable\n\n\n# Optional: Use dataclasses and BuildFlow will perform schema validation checks\n@dataclass\nclass InputSchema:\n    field: str\n\n@dataclass\nclass OutputSchema:\n    other: int\n\n\n# Optional: Configure the Runtime & Infra submodules for your use case.\n# All BuildFlow configs have class method for common use cases.\nruntime_config = RuntimeConfig.IO_BOUND(autoscale=True)\n# You can also set the values directly\ninfra_config = InfraConfig(\n    schema_validation=SchemaValidation.STRICT,\n    require_confirmation=True,\n    log_level=\"INFO\",\n)\n\n# Step 1. Create a BuildFlow Node (app) and define your input / output(s)\napp = Node(runtime_config=runtime_config, infra_config=infra_config)\n\n# NOTE: A Subscription will automatically be created in the billing project\nsource = GCPPubSubSubscription(topic='TODO', billing_project='TODO')\n# NOTE: A BigQuery Table will be automatically created using the\nsink = BigQuerySink(table_id='TODO')\n\n\n# Step 2. Create a Processor that reads from Google PubSub and writes to BigQuery\n@app.processor(\n  source=source,\n  sink=sink,\n  # Optional: Configure your processor's replica options. In this case, we will run\n  # 2 replicas per CPU core, and each replica will run 8 tasks concurrently.\n  num_cpus=0.5,\n  num_concurrency=8,\n)\ndef process_message(pubsub_message: InputSchema) -> OutputSchema:\n  # TODO(developer): Implement processing logic\n  ...\n  # The output is automatically sent to the sink provider\n  return OutputSchema(...)\n\n\n# Step 3. Start the BuildFlow app's Runtime\napp.run(\n  # Optional: Set infra options for this run. In this case, we will create the\n  # PubSub Subscription and BigQuery Tables on start, and will delete them\n  # once the run is complete. This can be useful for integration tests, or when\n  # trying out new cloud services.\n  apply_infrastructure: bool = True,\n  destroy_infrastructure: bool = True,\n)\n")),(0,o.kt)("p",null,"For more in-depth tutorials, see our walkthroughs."))}d.isMDXComponent=!0}}]);