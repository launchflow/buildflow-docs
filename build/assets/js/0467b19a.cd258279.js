"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[7554],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=i,d=p["".concat(s,".").concat(f)]||p[f]||m[f]||a;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5317:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={},o="AWS S3 Bucket",l={unversionedId:"reference/primitives/aws/s3",id:"reference/primitives/aws/s3",title:"AWS S3 Bucket",description:"S3Bucket is a sink primitive that can be used to write various files to an S3 bucket.  The sink primitive takes in a file path and will create one unique file per replica. To create a S3Bucket provide:",source:"@site/docs/reference/primitives/aws/s3.md",sourceDirName:"reference/primitives/aws",slug:"/reference/primitives/aws/s3",permalink:"/docs/reference/primitives/aws/s3",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/aws/s3.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Amazon Web Services",permalink:"/docs/category/amazon-web-services"},next:{title:"AWS SQS",permalink:"/docs/reference/primitives/aws/sqs"}},s={},c=[{value:"Types",id:"types",level:2},{value:"Resource Creation",id:"resource-creation",level:2},{value:"Configuration Options",id:"configuration-options",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"aws-s3-bucket"},"AWS S3 Bucket"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"S3Bucket")," is a sink primitive that can be used to write various files to an S3 bucket.  The sink primitive takes in a file path and will create one unique file per replica. To create a ",(0,i.kt)("inlineCode",{parentName:"p"},"S3Bucket")," provide:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bucket_name")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": The name of the bucket"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_path")," ",(0,i.kt)("strong",{parentName:"li"},"required"),":: the base path of the file to write to. We will take this path and generate a unique file path for each replica in the following format: ",(0,i.kt)("inlineCode",{parentName:"li"},"{file_path}-{uuid}.{extension}")," "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_format")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": The file format to write valid options are: JSON, CSV, and PARQUET"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"aws_region"),": The region the bucket exists in")),(0,i.kt)("p",null,"Example usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.aws import S3Bucket\n\n@app.pipeline(source=..., sink=S3Bucket(\n    bucket_name="bucket",\n    aws_region="us-east-1",\n    file_path="path/to/file_in_bucket",\n    file_format="PARQUET")\n)\n')),(0,i.kt)("p",null,":::"),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"S3Bucket")," sink expects an object that can be serialized in to a JSON object. You can return a ",(0,i.kt)("inlineCode",{parentName:"p"},"dataclass")," and we will automatically serialize it for you, or you can return a dictionary containing JSON serializable objects."),(0,i.kt)("p",null,"If you would like to return a custom type that is not JSON serializable you can implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"to_json")," method on your class and we will use that to serialize your object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class CustomType:\n    def __init__(self, b: int):\n        self.b = str\n\n    def to_json(self):\n        return {"b": self.b}\n\n@app.pipeline(source=..., sink=S3Bucket(...))\nasync def my_processor(elem: int) -> CustomType:\n    return CustomType(b=elem + 1)\n')),(0,i.kt)("h2",{id:"resource-creation"},"Resource Creation"),(0,i.kt)("p",null,"If you are using BuildFlow's built in resource creation/management you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"S3Bucket")," primitive to create a bucket in your AWS account."),(0,i.kt)("h2",{id:"configuration-options"},"Configuration Options"),(0,i.kt)("p",null,"You can provide the following options to control resource management of the S3 bucket:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"managed"),": Whether or not the topic is managed by BuildFlow. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"force_destroy"),": If true destroy will fail if the bucket contains objects. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"primitive = S3Bucket(...).options(managed=True, force_destroy=True)\n")))}m.isMDXComponent=!0}}]);