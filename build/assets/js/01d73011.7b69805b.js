"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[976],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),f=n,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||a;return r?o.createElement(m,s(s({ref:t},p),{},{components:r})):o.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:n,s[1]=i;for(var c=2;c<a;c++)s[c]=r[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},719:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:2},s="Concepts",i={unversionedId:"what_is_buildflow/concepts",id:"what_is_buildflow/concepts",title:"Concepts",description:"Nodes",source:"@site/docs/what_is_buildflow/concepts.md",sourceDirName:"what_is_buildflow",slug:"/what_is_buildflow/concepts",permalink:"/docs/what_is_buildflow/concepts",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/what_is_buildflow/concepts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Overview",permalink:"/docs/what_is_buildflow/overview"},next:{title:"Install",permalink:"/docs/install"}},l={},c=[{value:"Nodes",id:"nodes",level:2},{value:"Processors",id:"processors",level:2},{value:"ResourceType",id:"resourcetype",level:2},{value:"Providers",id:"providers",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"concepts"},"Concepts"),(0,n.kt)("h2",{id:"nodes"},"Nodes"),(0,n.kt)("p",null,"The Node class is the entrypoint into the BuildFlow Framework. Nodes acts as a container type for user-defined Processors and are responsible for orchestrating the Processors across the Runtime and Infrastructure submodules."),(0,n.kt)("p",null,"TLDR; Nodes act as a container type for a user's application:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from buildflow import Node\n\napp = Node()\n\n...\n")),(0,n.kt)("h2",{id:"processors"},"Processors"),(0,n.kt)("p",null,"At a high-level, Processors are a user-defined function sandwiched between an input provider (Source) and output provider (Sink). They act as a declaritive API for describing your system, and offload a majority of the work to the Node class and Providers."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"# Creates a Processor and adds it to the app (Node class)\n@app.processor(source=..., sink=...)\ndef my_processor(payload):\n    # TODO(developer): Add processing logic\n    return payload\n")),(0,n.kt)("h2",{id:"resourcetype"},"ResourceType"),(0,n.kt)("p",null,"ResourceTypes are the input (Sources) and output (Sinks) objects passed to a Processor. They act as a container type for any configuration values, such as a ",(0,n.kt)("inlineCode",{parentName:"p"},"project_id")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"table_id"),". ResourceTypes ",(0,n.kt)("strong",{parentName:"p"},"do not")," implement any logic, but rather expose a ",(0,n.kt)("inlineCode",{parentName:"p"},"provider()")," method fetching the Provider class that contains the logic."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"class BigQueryTable(ResourceType):\n    # format: project.dataset.table\n    table_id: str\n\n    def provider(self):\n        return BigQueryProvider(table_id=self.table_id)\n")),(0,n.kt)("h2",{id:"providers"},"Providers"),(0,n.kt)("p",null,"Providers implement the logic for setting up and interacting with other systems and resources (ResourceTypes). There are multiple types of Providers and each type is responsible for a single task (i.e. a PullProvider only needs to provide a ",(0,n.kt)("inlineCode",{parentName:"p"},"pull")," method)."))}u.isMDXComponent=!0}}]);