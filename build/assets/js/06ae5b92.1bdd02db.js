"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[3375],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},b=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=l(n),b=r,m=c["".concat(p,".").concat(b)]||c[b]||d[b]||o;return n?i.createElement(m,a(a({ref:t},s),{},{components:n})):i.createElement(m,a({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=b;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u[c]="string"==typeof e?e:r,a[1]=u;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}b.displayName="MDXCreateElement"},1286:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var i=n(7462),r=(n(7294),n(3905));const o={},a="Google Cloud Pub/Sub",u={unversionedId:"reference/primitives/gcp/gcp_pubsub",id:"reference/primitives/gcp/gcp_pubsub",title:"Google Cloud Pub/Sub",description:"GCP Pub/Sub Topic",source:"@site/docs/reference/primitives/gcp/gcp_pubsub.md",sourceDirName:"reference/primitives/gcp",slug:"/reference/primitives/gcp/gcp_pubsub",permalink:"/docs/reference/primitives/gcp/gcp_pubsub",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/gcp/gcp_pubsub.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Google Cloud BigQuery",permalink:"/docs/reference/primitives/gcp/gcp_bigquery"},next:{title:"Google Cloud Storage",permalink:"/docs/reference/primitives/gcp/gcp_storage"}},p={},l=[{value:"GCP Pub/Sub Topic",id:"gcp-pubsub-topic",level:2},{value:"Types",id:"types",level:3},{value:"Resource Creation",id:"resource-creation",level:3},{value:"Configuration Options",id:"configuration-options",level:3},{value:"GCP Pub/Sub Subscription",id:"gcp-pubsub-subscription",level:2},{value:"Types",id:"types-1",level:3},{value:"Resource Creation",id:"resource-creation-1",level:3},{value:"Configuration Options",id:"configuration-options-1",level:4}],s={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"google-cloud-pubsub"},"Google Cloud Pub/Sub"),(0,r.kt)("h2",{id:"gcp-pubsub-topic"},"GCP Pub/Sub Topic"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GCPPubSubTopic")," is a sink primitive that can be used to write data to a Pub/Sub topic. To create a ",(0,r.kt)("inlineCode",{parentName:"p"},"GCPPubSubTopic")," provide:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"project_id")," ",(0,r.kt)("strong",{parentName:"li"},"required"),": gcp project where the topic exists"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topic_name")," ",(0,r.kt)("strong",{parentName:"li"},"required"),": name of the topic")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.gcp import GCPPubSubTopic\n\n@app.pipeline(source=...,\n    sink=GCPPubSubTopic(\n        project_id="project",\n        topic_name="my-topic"))\n    ...\n')),(0,r.kt)("h3",{id:"types"},"Types"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GCPPubSubTopic")," sink expects an object that can be serialized into bytes. You can return a ",(0,r.kt)("inlineCode",{parentName:"p"},"dataclass")," and we will automatically serialize it to JSON and then UTF-8 encoded bytes. Or you can return a bytes object directly."),(0,r.kt)("p",null,"If you have a custom type you can implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"to_bytes")," method to return the bytes you want to send to Pub/Sub."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class CustomType:\n    def __init__(self, data: str):\n        self.data = str\n\n    def to_bytes(self):\n        return self.data.decode("utf-8")\n\n@app.pipeline(source=..., sink=GCPPubSubTopic(...))\nasync def my_processor(elem: str) -> CustomType:\n    return CustomType(data=elem)\n')),(0,r.kt)("h3",{id:"resource-creation"},"Resource Creation"),(0,r.kt)("p",null,"If you are using BuildFlow's built in resource creation/management you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"GCPPubSubTopic")," primitive to create a Pub/Sub topic in your provided project."),(0,r.kt)("h3",{id:"configuration-options"},"Configuration Options"),(0,r.kt)("p",null,"You can provide the following options to control resource management of the Pub/Sub topic:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"managed"),": Whether or not the topic is managed by BuildFlow. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"GCPPubSubTopic(...).options(managed=True)\n")),(0,r.kt)("h2",{id:"gcp-pubsub-subscription"},"GCP Pub/Sub Subscription"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GCPPubSubSubscription")," is a source primitive that can be used to read data from a Pub/Sub subscription. To create a ",(0,r.kt)("inlineCode",{parentName:"p"},"GCPPubSubSubscription")," provide:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"project_id")," ",(0,r.kt)("strong",{parentName:"li"},"required"),": gcp project where the subscription exists"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subscription_name")," ",(0,r.kt)("strong",{parentName:"li"},"required"),": name of the subscription")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom buildflow.io.gcp import GCPPubSubSubscription\n\n@app.pipeline(source=GCPPubSubSubscription(project_id="project", subscription_name="my-subscription"), sink=...)\ndef process(elem: MyType):\n    ...\n')),(0,r.kt)("h3",{id:"types-1"},"Types"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GCPPubSubSubscription")," source returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"bytes")," object by default. However you can also provide us a type that you would like us to deserialize the bytes into. If you provide a dataclass we will automatically deserialize the bytes into a JSON object and then create your dataclass. If you provide a custom type you can implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"from_bytes")," method to deserialize the bytes into your type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class CustomType:\n    def __init__(self, decoded_data: str):\n        self.decoded_data = str\n\n    @classmethod\n    def from_bytes(cls, data: bytes):\n        return cls(data.decode())\n\n@app.pipeline(source=GCPPubSubSubscription(...), sink=...)\nasync def my_processor(elem: CustomType) -> CustomType:\n    return elem\n")),(0,r.kt)("h3",{id:"resource-creation-1"},"Resource Creation"),(0,r.kt)("p",null,"If you are using BuildFlow's built in resource creation/management you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"GCPPubSubSubscription")," primitive to create a Pub/Sub subscription in your provided project that subscribes to your provided topic."),(0,r.kt)("h4",{id:"configuration-options-1"},"Configuration Options"),(0,r.kt)("p",null,"You can provide the following options to control resource management of the Pub/Sub topic:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"managed"),": Whether or not the topic is managed by BuildFlow. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topic"),": The ",(0,r.kt)("a",{parentName:"li",href:"./gcp_pubsub#gcp-pubsub-topic"},"GCPPubSubTopic")," of the topic you want to subscribe to this will be used when creating the subscription if it is managed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"include_attributes"),": Whether or not attributes should be included in the return type. If this is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," your pipeline will receive a ",(0,r.kt)("inlineCode",{parentName:"li"},"PubsubMessage")," class containing the raw message and attributes. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"False"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"GCPPubSubSubscription(...).options(managed=True, topic=GCPPubSubTopic(...), include_attributes=True)\n")))}d.isMDXComponent=!0}}]);