"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[679],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||s;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,i=new Array(s);i[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9069:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const s={sidebar_position:2},i="IO Connectors",a={unversionedId:"processor/io-connectors",id:"processor/io-connectors",title:"IO Connectors",description:"IO Connectors provide effecient I/O between popular services & storage systems.",source:"@site/docs/processor/io-connectors.md",sourceDirName:"processor",slug:"/processor/io-connectors",permalink:"/docs/processor/io-connectors",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/docs/processor/io-connectors.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Processor API",permalink:"/docs/processor/processor-api"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"All Connectors",id:"all-connectors",level:2},{value:"PubSub",id:"pubsub",level:3},{value:"Source Type - Streaming",id:"source-type---streaming",level:4},{value:"Class Definition",id:"class-definition",level:4},{value:"BigQuery",id:"bigquery",level:3},{value:"Source Type - Batch",id:"source-type---batch",level:4},{value:"Class Definition",id:"class-definition-1",level:4},{value:"DuckDB",id:"duckdb",level:3},{value:"Source Type - Batch",id:"source-type---batch-1",level:4},{value:"Class Definition",id:"class-definition-2",level:4},{value:"Redis Streams",id:"redis-streams",level:3},{value:"Source Type - Streaming",id:"source-type---streaming-1",level:4},{value:"Class Definition",id:"class-definition-3",level:4}],u={toc:l},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"io-connectors"},"IO Connectors"),(0,o.kt)("p",null,"IO Connectors provide effecient I/O between popular services & storage systems."),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"All Connectors can work in both ",(0,o.kt)("strong",{parentName:"p"},"streaming")," and ",(0,o.kt)("strong",{parentName:"p"},"batch")," runtimes."),(0,o.kt)("p",null,"The Processor's ",(0,o.kt)("strong",{parentName:"p"},"source")," Connector determines if the ",(0,o.kt)("strong",{parentName:"p"},"sink")," Connector should run in streaming or batch mode."),(0,o.kt)("p",null,"For Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# The BigQuery Streaming API will be used in this case\n@flow.processor(source=PubSub(...), sink=BigQuery(...))\ndef process(payload: Any):\n    return payload\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# The BigQuery LoadJobs API will be used in this case\n@flow.processor(source=BigQuery(...), sink=BigQuery(...))\ndef process(payload: Any):\n    return payload\n")),(0,o.kt)("h2",{id:"all-connectors"},"All Connectors"),(0,o.kt)("h3",{id:"pubsub"},"PubSub"),(0,o.kt)("h4",{id:"source-type---streaming"},"Source Type - Streaming"),(0,o.kt)("h4",{id:"class-definition"},"Class Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PubSub(IO):\n    # format: `projects/{$PROJECT_ID}/topics/{$TOPIC_ID}`\n    topic: str\n    # format: `projects/{$PROJECT_ID}/subscriptions/{$SUBSCRIPTION_ID}`\n    subscription: str\n")),(0,o.kt)("h3",{id:"bigquery"},"BigQuery"),(0,o.kt)("h4",{id:"source-type---batch"},"Source Type - Batch"),(0,o.kt)("h4",{id:"class-definition-1"},"Class Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class BigQuery(IO):\n    # format: `{$PROJECT_ID}.{$DATASET_NAME}.{$TABLE_NAME}`\n    table_id: str\n    # (source arg): The SQL query to execute\n    query: str\n    # The temporary dataset to store query results in.\n    # If unspecified we will attempt to create one.\n    temp_dataset: str\n    # The billing project to use for query usage.\n    # If unspecified we will use the project configured with application default credentials.\n    billing_project: str\n    # The temporary gcs bucket uri to store temp data in.\n    # If unspecified we will attempt to create one.\n    temp_gcs_bucket: str\n")),(0,o.kt)("h3",{id:"duckdb"},"DuckDB"),(0,o.kt)("h4",{id:"source-type---batch-1"},"Source Type - Batch"),(0,o.kt)("h4",{id:"class-definition-2"},"Class Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class DuckDB(IO):\n    # The name of the database to connect to\n    database: str\n    # The name of the table to read from / write to\n    table: str = ''\n    # (source arg): The SQL query to execute\n    query: str = ''\n")),(0,o.kt)("h3",{id:"redis-streams"},"Redis Streams"),(0,o.kt)("h4",{id:"source-type---streaming-1"},"Source Type - Streaming"),(0,o.kt)("h4",{id:"class-definition-3"},"Class Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class RedisStream(IO):\n    # The Redis Server's host (i.e. localhost)\n    host: str\n    # The Redis Server's port\n    port: str\n    # The list of streams to read from / write to\n    streams: List[str]\n    # The position in the stream to start reading from.\n    # Format: {stream_id: position}\n    start_positions: Dict[str, str] = dataclasses.field(default_factory=dict)\n    # Read timeout. If > 0 this is how long we will block while attempting to read from the stream.\n    read_timeout_secs: int = -1\n")))}d.isMDXComponent=!0}}]);