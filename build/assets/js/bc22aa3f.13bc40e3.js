"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[9911],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1977:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="DuckDB",l={unversionedId:"reference/primitives/duckdb",id:"reference/primitives/duckdb",title:"DuckDB",description:"DuckDB is a sink that can be use to write data to a DuckDB table. To create a DuckDB simply provide:",source:"@site/docs/reference/primitives/duckdb.md",sourceDirName:"reference/primitives",slug:"/reference/primitives/duckdb",permalink:"/docs/reference/primitives/duckdb",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/duckdb.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Snowflake Table",permalink:"/docs/reference/primitives/snowflake"},next:{title:"API",permalink:"/docs/category/api"}},c={},p=[{value:"Types",id:"types",level:2}],s={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"duckdb"},"DuckDB"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"DuckDB")," is a ",(0,a.kt)("strong",{parentName:"p"},"sink")," that can be use to write data to a DuckDB table. To create a ",(0,a.kt)("inlineCode",{parentName:"p"},"DuckDB")," simply provide:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"database")," ",(0,a.kt)("strong",{parentName:"li"},"required"),": The name of the DuckDB database the table exists in"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"table")," ",(0,a.kt)("strong",{parentName:"li"},"required"),": The name the table")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.duckdb import DuckDB\n\n@app.pipeline(source=...,\n    sink=DuckDB(\n        database="database",\n        table="table"))\n    ...\n')),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DuckDB")," sink expects an object that can be serialized in to a JSON object. You can return a ",(0,a.kt)("inlineCode",{parentName:"p"},"dataclass")," and we will automatically serialize it for you, or you can return a dictionary containing JSON serializable objects."),(0,a.kt)("p",null,"If you would like to return a custom type that is not JSON serializable you can implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"to_json")," method on your class and we will use that to serialize your object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class CustomType:\n    def __init__(self, b: int):\n        self.b = str\n\n    def to_json(self):\n        return {"b": self.b}\n\n@app.pipeline(source=..., sink=DuckDB(...))\nasync def my_processor(elem: int) -> CustomType:\n    return CustomType(b=elem + 1)\n')))}d.isMDXComponent=!0}}]);