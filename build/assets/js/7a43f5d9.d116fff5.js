"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[983],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),g=o,y=p["".concat(l,".").concat(g)]||p[g]||d[g]||a;return r?n.createElement(y,i(i({ref:t},c),{},{components:r})):n.createElement(y,i({ref:t},c))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},9163:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={},i="Google Cloud BigQuery",s={unversionedId:"io-providers/gcp_bigquery",id:"io-providers/gcp_bigquery",title:"Google Cloud BigQuery",description:"BigQuery refers to Google's BigQuery data warehouse. It is a batch source connector, and can be used in both streaming and batch runtimes as a sink connector.",source:"@site/docs/io-providers/gcp_bigquery.md",sourceDirName:"io-providers",slug:"/io-providers/gcp_bigquery",permalink:"/docs/io-providers/gcp_bigquery",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/io-providers/gcp_bigquery.md",tags:[],version:"current",frontMatter:{}},l={},u=[{value:"Source Class Definition",id:"source-class-definition",level:2},{value:"Sink Class Definition",id:"sink-class-definition",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"BigQuery to local process",id:"bigquery-to-local-process",level:3},{value:"BigQuery to BigQuery",id:"bigquery-to-bigquery",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"google-cloud-bigquery"},"Google Cloud BigQuery"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"BigQuery")," refers to Google's BigQuery data warehouse. It is a ",(0,o.kt)("strong",{parentName:"p"},"batch")," source connector, and can be used in both ",(0,o.kt)("strong",{parentName:"p"},"streaming")," and ",(0,o.kt)("strong",{parentName:"p"},"batch")," runtimes as a sink connector."),(0,o.kt)("p",null,"BigQuery also supports output schema validation. You can find more information about schema validation ",(0,o.kt)("a",{parentName:"p",href:"/docs/schema-validation"},"here"),"."),(0,o.kt)("h2",{id:"source-class-definition"},"Source Class Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class BigQuerySource(io.Source):\n    \"\"\"Source for reading data from BigQuery.\"\"\"\n    # The BigQuery table to read from.\n    # Should be of the format project.dataset.table\n    # One and only one of table_id and query should be provided.\n    table_id: str = ''\n    # The query to read data from.\n    # One and only one of table_id and query should be provided.\n    query: str = ''\n    # The temporary dataset to store query results in. If unspecified we will\n    # attempt to create one.\n    temp_dataset: str = ''\n    # The billing project to use for query usage. If unset we will use the\n    # project configured with application default credentials.\n    billing_project: str = ''\n")),(0,o.kt)("h2",{id:"sink-class-definition"},"Sink Class Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class BigQuerySink(io.Sink):\n    """Sink for writing data to BigQuery."""\n    # The BigQuery table to read from.\n    # Should be of the format project.dataset.table\n    table_id: str\n    # The temporary gcs bucket uri to store temp data in. This is only used in\n    # batch mode.\n    temp_gcs_bucket: str = \'\'\n    # The billing project to use for usage. If unset we will use the\n    # project configured with application default credentials.\n    billing_project: str = \'\'\n')),(0,o.kt)("h2",{id:"example-usage"},"Example Usage"),(0,o.kt)("h3",{id:"bigquery-to-local-process"},"BigQuery to local process"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@app.processor(\n    source=BigQuerySource(table_id='...'),\n)\ndef process(dataset: ray.data.Dataset):\n    # TODO: process dataset\n    return dataset\n\noutput = app.run()\n")),(0,o.kt)("p",null,"In this example, the table is read in and sent to the processor."),(0,o.kt)("p",null,"The dataset will be sent back to the process that launched the job (via output = app.run(...))"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"bigquery-to-bigquery"},"BigQuery to BigQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@app.processor(\n    source=BigQuerySource(query='SELECT * FROM `...` GROUP BY 1'),\n    sink=BigQuerySink(table_id='...'),\n)\ndef process(dataset: ray.data.Dataset):\n    # TODO: process dataset\n    return dataset\n")),(0,o.kt)("p",null,"In this example, a query is executed on BigQuery and the results are sent to the processor as a ray Dataset."),(0,o.kt)("p",null,"The output is appended to another BigQuery table."))}d.isMDXComponent=!0}}]);