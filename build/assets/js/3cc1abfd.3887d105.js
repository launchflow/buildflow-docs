"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[7096],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3010:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:2},o="Key Concepts",s={unversionedId:"key-concepts",id:"key-concepts",title:"Key Concepts",description:"Before getting started with BuildFlow, it's important to understand the core concepts and terminology used throughout the documentation.",source:"@site/docs/key-concepts.md",sourceDirName:".",slug:"/key-concepts",permalink:"/docs/key-concepts",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/key-concepts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Install",permalink:"/docs/install"},next:{title:"User Guides",permalink:"/docs/category/user-guides"}},l={},p=[{value:"Flows",id:"flows",level:2},{value:"Processors",id:"processors",level:2},{value:"Pipelines",id:"pipelines",level:3},{value:"Replicas",id:"replicas",level:2},{value:"Primitives",id:"primitives",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"key-concepts"},"Key Concepts"),(0,a.kt)("p",null,"Before getting started with BuildFlow, it's important to understand the core concepts and terminology used throughout the documentation."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#flows"},"Flow"),": a container type for user-defined Processors."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#processors"},"Processor"),": a user-defined, individually scalable component of a flow"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#pipelines"},"Pipeline"),": a specific type of processor that reads from a Source and writes to a Sink"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#replicas"},"Replica"),": an individual instance of a processor that is reading from a source and writing to a sink. More replicas are added and remove with autoscaling."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#primitives"},"Primitives"),": a resource that a processor may read from, write to, or manage")),(0,a.kt)("h2",{id:"flows"},"Flows"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"./user-guides/flows/overview"},"Flow")," class is the entrypoint into the BuildFlow Framework. They acts as a container type for user-defined Processors and are responsible for orchestrating the Processors across the Runtime and Infrastructure submodules."),(0,a.kt)("p",null,"TLDR; Flows act as a container type for a user's application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from buildflow import Flow\n\napp = Flow()\n\n...\n")),(0,a.kt)("h2",{id:"processors"},"Processors"),(0,a.kt)("p",null,"At a high-level, Processors are a user-defined function that are individually scalable. Currently BuildFlow supports one type of Processor, a ",(0,a.kt)("a",{parentName:"p",href:"#pipeline"},"Pipeline"),", which reads from a real-time Source and writes to a Sink. With plan in the future to add support for: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Batch Pipelines"),(0,a.kt)("li",{parentName:"ul"},"HTTP Endpoints"),(0,a.kt)("li",{parentName:"ul"},"WebSockets")),(0,a.kt)("h3",{id:"pipelines"},"Pipelines"),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"./user-guides/pipelines/overview"},(0,a.kt)("inlineCode",{parentName:"a"},"pipeline"))," is a specifc type of processor intended for real-time data processing. Pipelines read from an unbounded source such as (Kafka, AWS SQS, or GCP Pub/Sub) and outputs to a Sink. They are attached to a Flow by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@app.pipeline")," decorator."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Creates a Processor and adds it to the app (Node class)\n@app.pipeline(source=..., sink=...)\ndef my_processor(payload):\n    # TODO(developer): Add processing logic\n    return payload\n")),(0,a.kt)("h2",{id:"replicas"},"Replicas"),(0,a.kt)("p",null,"A replica is an individual instance of a processo. As the load of your source changes, BuildFlow will automatically scale the number of replicas to match the load."),(0,a.kt)("h2",{id:"primitives"},(0,a.kt)("a",{parentName:"h2",href:"./user-guides/primitives/overview"},"Primitives")),(0,a.kt)("p",null,"Primitives represent an individual resource that a processor may read or write to. For example, a ",(0,a.kt)("inlineCode",{parentName:"p"},"BigQueryTable")," is a primitive that represents a single BigQuery table. Primitives define how to read from a source, write to a sink, and also how to manage the primitive with pulumi. "),(0,a.kt)("p",null,"Primitives can be used as inputs (Sources) or outputs (Sinks) for pipelines. A full list of our support primitives can be found in our ",(0,a.kt)("a",{parentName:"p",href:"./category/primitives"},"primitive docs"),". You can also define your own primitives for reading, writing, and managing custom resources."))}d.isMDXComponent=!0}}]);