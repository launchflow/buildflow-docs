"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[6384],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,g=c["".concat(u,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(g,o(o({ref:t},s),{},{components:n})):r.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8326:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={},o="Google Cloud BigQuery",l={unversionedId:"reference/primitives/gcp/gcp_bigquery",id:"reference/primitives/gcp/gcp_bigquery",title:"Google Cloud BigQuery",description:"BigQueryTable",source:"@site/docs/reference/primitives/gcp/gcp_bigquery.md",sourceDirName:"reference/primitives/gcp",slug:"/reference/primitives/gcp/gcp_bigquery",permalink:"/docs/reference/primitives/gcp/gcp_bigquery",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/gcp/gcp_bigquery.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Google Cloud Platform",permalink:"/docs/category/google-cloud-platform"},next:{title:"Google Cloud Pub/Sub",permalink:"/docs/reference/primitives/gcp/gcp_pubsub"}},u={},p=[{value:"BigQueryTable",id:"bigquerytable",level:2},{value:"Types",id:"types",level:3},{value:"Resource Creation",id:"resource-creation",level:3},{value:"Configuration Options",id:"configuration-options",level:4}],s={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"google-cloud-bigquery"},"Google Cloud BigQuery"),(0,i.kt)("h2",{id:"bigquerytable"},"BigQueryTable"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BigQueryTable")," is a ",(0,i.kt)("strong",{parentName:"p"},"sink")," that can be use to write data to a BigQuery table. To create a ",(0,i.kt)("inlineCode",{parentName:"p"},"BigQueryTable")," simply provide:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"project_id")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": The name of the GCP project the table exists in"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dataset_name")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": The name of the dataset the table exists in"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"table_name")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": The name of the table ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.gcp import BigQueryTable\n\n@app.pipeline(source=...,\n    sink=BigQueryTable(\n        project_id="project",\n        dataset_name="dataet",\n        table_name="table"))\n    ...\n')),(0,i.kt)("h3",{id:"types"},"Types"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"BigQueryTable")," sink expects an object that can be serialized in to a JSON object. You can return a ",(0,i.kt)("inlineCode",{parentName:"p"},"dataclass")," and we will automatically serialize it for you, or you can return a dictionary containing JSON serializable objects."),(0,i.kt)("p",null,"If you would like to return a custom type that is not JSON serializable you can implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"to_json")," method on your class and we will use that to serialize your object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class CustomType:\n    def __init__(self, b: int):\n        self.b = str\n\n    def to_json(self):\n        return {"b": self.b}\n\n@app.pipeline(source=..., sink=BigQueryTable(...))\nasync def my_processor(elem: int) -> CustomType:\n    return CustomType(b=elem + 1)\n')),(0,i.kt)("h3",{id:"resource-creation"},"Resource Creation"),(0,i.kt)("p",null,"If you are using BuildFlow's built in resource creation/management you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"BigQueryTable")," primitive to create a Pub/Sub topic in your provided project."),(0,i.kt)("h4",{id:"configuration-options"},"Configuration Options"),(0,i.kt)("p",null,"You can provide the following options to control resource management of the BigQuery table:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"managed"),": Whether or not the topic is managed by BuildFlow. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"include_dataset"),": Whether or not the dataset should be included in resource management / creation. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"True"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"destroy_projection"),": Whether or not the dataset should be destroyed when the ",(0,i.kt)("inlineCode",{parentName:"li"},"buildflow destroy")," is run. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"batch_size"),": The number of rows to batch together in one write request to BigQuery. Defaults to 10,000. If you produce more than rows than ",(0,i.kt)("inlineCode",{parentName:"li"},"batch_size")," the rows will be split in to multiple requests where the number of requests equals: ",(0,i.kt)("inlineCode",{parentName:"li"},"len(rows) / batch_size"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"BigQueryTable(...).options(managed=True, include_dataset=True, dataset_managed=True, batch_size=100_000)\n")))}d.isMDXComponent=!0}}]);