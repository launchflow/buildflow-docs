"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[141],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},u=Object.keys(e);for(n=0;n<u.length;n++)r=u[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(n=0;n<u.length;n++)r=u[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),l=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},c="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,u=e.originalType,a=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(r),d=o,f=c["".concat(a,".").concat(d)]||c[d]||b[d]||u;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var u=r.length,s=new Array(u);s[0]=d;var i={};for(var a in t)hasOwnProperty.call(t,a)&&(i[a]=t[a]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<u;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2113:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>b,frontMatter:()=>u,metadata:()=>i,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const u={},s="Google Cloud PubSub",i={unversionedId:"io-providers/gcp_pubsub",id:"io-providers/gcp_pubsub",title:"Google Cloud PubSub",description:"PubSub refers to Google's Pub/Sub service. It is a streaming source connector.",source:"@site/docs/io-providers/gcp_pubsub.md",sourceDirName:"io-providers",slug:"/io-providers/gcp_pubsub",permalink:"/docs/io-providers/gcp_pubsub",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/io-providers/gcp_pubsub.md",tags:[],version:"current",frontMatter:{}},a={},l=[{value:"Source Output Type",id:"source-output-type",level:2},{value:"Source Class Definition",id:"source-class-definition",level:2},{value:"Sink Class Definition",id:"sink-class-definition",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"PubSub to BigQuery",id:"pubsub-to-bigquery",level:3},{value:"PubSub to PubSub",id:"pubsub-to-pubsub",level:3}],p={toc:l},c="wrapper";function b(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"google-cloud-pubsub"},"Google Cloud PubSub"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"PubSub")," refers to Google's Pub/Sub service. It is a ",(0,o.kt)("strong",{parentName:"p"},"streaming")," source connector."),(0,o.kt)("p",null,"Messages are sent to the processor 1 at a time. If you need to emit mulitple outputs, you should return an iterable (list, generator, etc.)"),(0,o.kt)("h2",{id:"source-output-type"},"Source Output Type"),(0,o.kt)("p",null,"By default the Pub/Sub source will return a dictionary containing the payload of the Pub/Sub message. If you set ",(0,o.kt)("inlineCode",{parentName:"p"},"include_attributes")," to true, you will get a ",(0,o.kt)("inlineCode",{parentName:"p"},"PubsubMessage")," object instead with the following definition:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PubsubMessage:\n    data: Dict[str, Any]\n    attributes: Dict[str, Any]\n")),(0,o.kt)("h2",{id:"source-class-definition"},"Source Class Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PubSubSource(io.StreamingSource):\n    # The pubsub subscription to read data from.\n    subscription: str\n    # The topic to connect to for the subscription. If this is provided and\n    # subscription does not exist we will create it.\n    topic: str = ''\n    # Whether or not to include the pubsub attributes. If this is true you will\n    # get a buildflow.PubsubMessage class as your input.\n    include_attributes: bool = False\n")),(0,o.kt)("h2",{id:"sink-class-definition"},"Sink Class Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclasses.dataclass\nclass PubSubSink(io.Sink):\n    topic: str\n")),(0,o.kt)("h2",{id:"example-usage"},"Example Usage"),(0,o.kt)("h3",{id:"pubsub-to-bigquery"},"PubSub to BigQuery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@app.processor(\n    source=PubSub(subscription='...'),\n    sink=BigQuery(table_id='...'),\n)\ndef process(payload: Dict[str, Any]):\n    return payload\n")),(0,o.kt)("p",null,"In this example, messages are processed one at a time before writing the contents to BigQuery."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"pubsub-to-pubsub"},"PubSub to PubSub"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@app.processor(\n    source=PubSub(subscription='...'),\n    sink=PubSub(topic='...'),\n)\ndef process(payload: Dict[str, Any]):\n    return payload\n")),(0,o.kt)("p",null,"In this example, messages are processed one at a time before publishing the contents to another PubSub topic."))}b.isMDXComponent=!0}}]);