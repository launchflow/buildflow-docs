"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[10],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>y});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),l=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,y=u["".concat(i,".").concat(m)]||u[m]||d[m]||a;return t?n.createElement(y,p(p({ref:r},c),{},{components:t})):n.createElement(y,p({ref:r},c))}));function y(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,p=new Array(a);p[0]=m;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[u]="string"==typeof e?e:o,p[1]=s;for(var l=2;l<a;l++)p[l]=t[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6475:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>p,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=t(7462),o=(t(7294),t(3905));const a={sidebar_position:2},p="Node API",s={unversionedId:"apis/node",id:"apis/node",title:"Node API",description:"The Node object is the container for your application.",source:"@site/docs/apis/node.md",sourceDirName:"apis",slug:"/apis/node",permalink:"/docs/apis/node",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/apis/node.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mainSidebar",previous:{title:"Processor API",permalink:"/docs/apis/processor"},next:{title:"Provider API",permalink:"/docs/apis/providers/base"}},i={},l=[{value:"Create a new app",id:"create-a-new-app",level:2},{value:"Attach Processors to your app",id:"attach-processors-to-your-app",level:2},{value:"Run your app",id:"run-your-app",level:2}],c={toc:l},u="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"node-api"},"Node API"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"Node")," object is the container for your application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from buildflow import Node\n\napp = Node(...)\n\n@app.processor(...)\ndef my_processor(element):\n    ...\n\napp.run()\n")),(0,o.kt)("p",null,"A Node can contain multiple ",(0,o.kt)("a",{parentName:"p",href:"./processor"},"Processors")," and will deploy all Processors to a single ",(0,o.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/cluster/"},"Ray Cluster"),". Multiple Nodes can be deployed together using a ",(0,o.kt)("a",{parentName:"p",href:"./deployment-grid"},"DeploymentGrid"),"."),(0,o.kt)("h2",{id:"create-a-new-app"},"Create a new app"),(0,o.kt)("p",null,"Creating a Node object is as simple as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from buildflow import Node\n\napp = Node()\n")),(0,o.kt)("h2",{id:"attach-processors-to-your-app"},"Attach Processors to your app"),(0,o.kt)("p",null,"Processors can be attached to a Node with a python decorator like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@app.processor(source=..., sink=...)\ndef my_processor(element):\n    ...\n")),(0,o.kt)("p",null,"The Node manages the entire lifecycle of your Processor(s)."),(0,o.kt)("p",null,"Processors come in two classes: ",(0,o.kt)("strong",{parentName:"p"},"Streaming")," and ",(0,o.kt)("strong",{parentName:"p"},"Batch"),". Your Processor's ",(0,o.kt)("inlineCode",{parentName:"p"},"source")," argument will determine which runtime is used (e.g. PubSubSource will spawn a Streaming runtime). You can learn more in the ",(0,o.kt)("a",{parentName:"p",href:"./processor"},"Processor Overview"),"."),(0,o.kt)("h2",{id:"run-your-app"},"Run your app"),(0,o.kt)("p",null,"Once you have attached your processors you can run them by simply by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"run()")," on the Node object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"app.run()\n")),(0,o.kt)("p",null,"Once this is called your Processors will begin executing and your application will run until completion."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Streaming Processors")," will run forever (or until you kill the python process).")))}d.isMDXComponent=!0}}]);