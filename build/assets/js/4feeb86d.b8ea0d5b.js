"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[6893],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=c(n),d=i,f=s["".concat(p,".").concat(d)]||s[d]||m[d]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={},a="Google Cloud Storage",l={unversionedId:"reference/primitives/gcp/gcp_storage",id:"reference/primitives/gcp/gcp_storage",title:"Google Cloud Storage",description:"GCSBucket is a sink primitive that can be used to write various files to a GCS bucket.  The sink primitive takes in a file path and will create one unique file per replica. To create a GCSBucket provide:",source:"@site/docs/reference/primitives/gcp/gcp_storage.md",sourceDirName:"reference/primitives/gcp",slug:"/reference/primitives/gcp/gcp_storage",permalink:"/docs/reference/primitives/gcp/gcp_storage",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/reference/primitives/gcp/gcp_storage.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Google Cloud Pub/Sub",permalink:"/docs/reference/primitives/gcp/gcp_pubsub"},next:{title:"GCS File Change Stream",permalink:"/docs/reference/primitives/gcp/gcs_file_change_stream"}},p={},c=[{value:"Types",id:"types",level:2},{value:"Resource Creation",id:"resource-creation",level:2},{value:"Configuration Options",id:"configuration-options",level:2}],u={toc:c},s="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"google-cloud-storage"},"Google Cloud Storage"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GCSBucket")," is a sink primitive that can be used to write various files to a GCS bucket.  The sink primitive takes in a file path and will create one unique file per replica. To create a ",(0,i.kt)("inlineCode",{parentName:"p"},"GCSBucket")," provide:"),(0,i.kt)("p",null,"Description of the primitive. Folowed by arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"project_id")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": The project ID where the GCS bucket lives"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bucket_name")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": The name of the bucket"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_path")," ",(0,i.kt)("strong",{parentName:"li"},"required"),":: the base path of the file to write to. We will take this path and generate a unique file path for each replica in the following format: ",(0,i.kt)("inlineCode",{parentName:"li"},"{file_path}-{uuid}.{extension}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_format")," ",(0,i.kt)("strong",{parentName:"li"},"required"),": The file format to write valid options are: JSON, CSV, and PARQUET")),(0,i.kt)("p",null,"Example usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from buildflow.io.gcp import GCSBucket\n\n@app.pipeline(source=..., sink=GCSBucket(\n    project_id="project",\n    bucket_name="bucket",\n    file_path="path/to/file_in_bucket",\n    file_format="PARQUET")\n)\n')),(0,i.kt)("p",null,":::"),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"GCSBucket")," sink expects an object that can be serialized in to a JSON object. You can return a ",(0,i.kt)("inlineCode",{parentName:"p"},"dataclass")," and we will automatically serialize it for you, or you can return a dictionary containing JSON serializable objects."),(0,i.kt)("p",null,"If you would like to return a custom type that is not JSON serializable you can implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"to_json")," method on your class and we will use that to serialize your object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class CustomType:\n    def __init__(self, b: int):\n        self.b = str\n\n    def to_json(self):\n        return {"b": self.b}\n\n@app.pipeline(source=..., sink=GCSBucket(...))\nasync def my_processor(elem: int) -> CustomType:\n    return CustomType(b=elem + 1)\n')),(0,i.kt)("h2",{id:"resource-creation"},"Resource Creation"),(0,i.kt)("p",null,"If you are using BuildFlow's built in resource creation/management you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"GCSBucket")," primitive to create a GCS Bucket in your provided project."),(0,i.kt)("h2",{id:"configuration-options"},"Configuration Options"),(0,i.kt)("p",null,"You can provide the following options to control resource management of the GCS bucket:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"managed"),": Whether or not the topic is managed by BuildFlow. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"force_destroy"),": If true destroy will fail if the bucket contains objects. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"False"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bucket_region"),": The region to create the bucket it.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'primitive = GCSBucket(...).options(managed=True, force_destroy=True, bucket_region="US")\n')))}m.isMDXComponent=!0}}]);