"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[2382],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var o=t(7294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,o,s=function(e,r){if(null==e)return{};var t,o,s={},n=Object.keys(e);for(o=0;o<n.length;o++)t=n[o],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)t=n[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=o.createContext({}),c=function(e){var r=o.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=c(e.components);return o.createElement(l.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},f=o.forwardRef((function(e,r){var t=e.components,s=e.mdxType,n=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),f=s,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||n;return t?o.createElement(m,a(a({ref:r},p),{},{components:t})):o.createElement(m,a({ref:r},p))}));function m(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var n=t.length,a=new Array(n);a[0]=f;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var c=2;c<n;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7563:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>n,metadata:()=>i,toc:()=>c});var o=t(7462),s=(t(7294),t(3905));const n={},a="Stateful Processors",i={unversionedId:"user-guides/processors/stateful-processors",id:"user-guides/processors/stateful-processors",title:"Stateful Processors",description:"Sometimes you need to keep some kind of state between elements your processor is processing. Such as keeping network connections open or loading a model. This can be accomplished by attaching your process to a class instead of a function.",source:"@site/docs/user-guides/processors/stateful-processors.md",sourceDirName:"user-guides/processors",slug:"/user-guides/processors/stateful-processors",permalink:"/docs/user-guides/processors/stateful-processors",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/user-guides/processors/stateful-processors.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Processors",permalink:"/docs/user-guides/processors/overview"},next:{title:"Async Processors",permalink:"/docs/user-guides/processors/async-processors"}},l={},c=[],p={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,s.kt)(u,(0,o.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"stateful-processors"},"Stateful Processors"),(0,s.kt)("p",null,"Sometimes you need to keep some kind of state between elements your processor is processing. Such as keeping network connections open or loading a model. This can be accomplished by attaching your process to a class instead of a function."),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"You can use a stateful process for any of our supported processors (pipelines, collectors, and endpoints).")),(0,s.kt)("p",null,"If attaching to a class you will need to implement three lifecycle methods:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"setup")," - This method will be called once per replica before your process logic is called. This is where you should perform any stateful setup."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"process")," - This method will be called once per element your pipeline processes. This is where you should perform your processing logic."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"teardown")," - This method will be called once per replica when shutting down a replica (either due to scaling down or a drain request). This is where you should perform any stateful cleanup.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'@app.pipeline(source=Primitive(...), sink=Primitive(...))\nclass ImageClassificationProcessor:\n    def setup(self):\n        """Perform any stateful setup here. Like loading a model"""\n        self.model = load_model(...)\n\n    def process(self, elem)\n        return self.model.classify(elem)    \n\n    def teardown(self):\n        self.model.cleanup()\n')))}d.isMDXComponent=!0}}]);