"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[659],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(n),b=a,g=c["".concat(u,".").concat(b)]||c[b]||d[b]||o;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},5306:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={},i="GCP Pub/Sub Streaming",l={unversionedId:"walkthroughs/pubsub_streaming",id:"walkthroughs/pubsub_streaming",title:"GCP Pub/Sub Streaming",description:"In this walkthrough we will run a BuildFlow application that reads from a Pub/Sub topic containing publically available taxi data and write the data to BigQuery. You can find all the code for this walk through here.",source:"@site/docs/walkthroughs/pubsub_streaming.md",sourceDirName:"walkthroughs",slug:"/walkthroughs/pubsub_streaming",permalink:"/docs/walkthroughs/pubsub_streaming",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/walkthroughs/pubsub_streaming.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"PulsingProvider",permalink:"/docs/apis/providers/local/pulse_provider"},next:{title:"Local GCP Pub/Sub to Parquet",permalink:"/docs/walkthroughs/local_pubsub_streaming"}},u={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Setting up your environment",id:"setting-up-your-environment",level:3},{value:"Run Pipeline",id:"run-pipeline",level:2},{value:"Pipeline Code",id:"pipeline-code",level:3},{value:"Cleaning Up",id:"cleaning-up",level:2}],s={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gcp-pubsub-streaming"},"GCP Pub/Sub Streaming"),(0,a.kt)("p",null,"In this walkthrough we will run a BuildFlow application that reads from a Pub/Sub topic containing publically available taxi data and write the data to BigQuery. You can find all the code for this walk through ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/launchflow/buildflow/blob/main/buildflow/samples/pubsub_walkthrough.py"},"here"),"."),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"In order to follow this guide you must have a GCP project set up where a Pub/Sub subscription and BigQuery table can be created. You will also need to have the gcloud CLI installed to setup authentication / clean up resources when you are finished. Instructions for that can be found ",(0,a.kt)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/install"},"here"),"."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you don't have a GCP project setup you can try out our ",(0,a.kt)("a",{parentName:"p",href:"/docs/walkthroughs/local_pubsub_streaming"},"local walkthrough")," which will run everything local.")),(0,a.kt)("h3",{id:"setting-up-your-environment"},"Setting up your environment"),(0,a.kt)("p",null,"To interact with GCP resources BuildFlow will use the application default\ncredentials on your machine. To set those up you can run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"gcloud auth application-default login\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you happen to be following along from a VM running on GCP these may already\nbe setup for you.")),(0,a.kt)("p",null,"Install BuildFlow"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pip install buildflow\n")),(0,a.kt)("h2",{id:"run-pipeline"},"Run Pipeline"),(0,a.kt)("p",null,"When running the application the following resources will be created."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pub/Sub subscriber that subscribers to the taxi data Pub/Sub topic"),(0,a.kt)("li",{parentName:"ul"},"BigQuery dataset and BigQuery table where the data is written.")),(0,a.kt)("p",null,"The application does the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Listens to the public taxi ride Pub/Sub topic"),(0,a.kt)("li",{parentName:"ol"},"Converts data into a Python dataclass"),(0,a.kt)("li",{parentName:"ol"},"Writes output to BigQuery.")),(0,a.kt)("p",null,"To run the application:"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You will need to set GCP_PROJECT to a GCP project you can create the resources in.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python -m buildflow.samples.pubsub_walkthrough --gcp_project=$GCP_PROJECT\n")),(0,a.kt)("h3",{id:"pipeline-code"},"Pipeline Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import argparse\nimport dataclasses\nfrom datetime import datetime\nimport sys\nimport logging\nfrom typing import Any, Dict\n\nimport buildflow\nfrom buildflow import Flow\n\n# Parser to allow run time configuration of arguments\nparser = argparse.ArgumentParser()\nparser.add_argument('--gcp_project', type=str, required=True)\nparser.add_argument('--bigquery_table', type=str, default='taxi_ride_data')\nargs, _ = parser.parse_known_args(sys.argv)\n\n# Set up a subscriber for the source.\n# If this subscriber does not exist yet BuildFlow will create it.\ninput_sub = buildflow.PubSubSource(\n    subscription=f'projects/{args.gcp_project}/subscriptions/taxiride-sub',\n    topic='projects/pubsub-public-data/topics/taxirides-realtime')\n# Set up a BigQuery table for the sink.\n# If this table does not exist yet BuildFlow will create it.\noutput_table = buildflow.BigQuerySink(\n    table_id=f'{args.gcp_project}.buildflow_walkthrough.{args.bigquery_table}')\n\n\n# Define an output type for our application.\n# By using a dataclass we can ensure our python type hints are validated\n# against the BigQuery table's schema.\n@dataclasses.dataclass\nclass TaxiOutput:\n    ride_id: str\n    point_idx: int\n    latitude: float\n    longitude: float\n    timestamp: datetime\n    meter_reading: float\n    meter_increment: float\n    ride_status: str\n    passenger_count: int\n\n\nflow = Flow()\n\n\n# Define our processor.\n@app.processor(source=input_sub, sink=output_table)\ndef process(element: Dict[str, Any]) -> TaxiOutput:\n    return element\n\n\n# Run our flow.\nflow.run()()\n")),(0,a.kt)("h2",{id:"cleaning-up"},"Cleaning Up"),(0,a.kt)("p",null,"Make sure to clean up the resources you created to avoid extra GCP costs."),(0,a.kt)("p",null,"Delete the Pub/Sub subscription:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"gcloud pubsub subscriptions delete projects/$GCP_PROJECT/subscriptions/taxiride-sub\n")),(0,a.kt)("p",null,"Delete the BigQuery table:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"bq rm --project_id=$GCP_PROJECT buildflow_walkthrough.taxi_ride_data\n")))}d.isMDXComponent=!0}}]);