"use strict";(self.webpackChunkbuildflow_docs=self.webpackChunkbuildflow_docs||[]).push([[3088],{3905:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>m});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var u=n.createContext({}),p=function(e){var t=n.useContext(u),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},l=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),c=p(o),y=r,m=c["".concat(u,".").concat(y)]||c[y]||d[y]||i;return o?n.createElement(m,s(s({ref:t},l),{},{components:o})):n.createElement(m,s({ref:t},l))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,s=new Array(i);s[0]=y;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a[c]="string"==typeof e?e:r,s[1]=a;for(var p=2;p<i;p++)s[p]=o[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}y.displayName="MDXCreateElement"},6710:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var n=o(7462),r=(o(7294),o(3905));const i={},s="Custom Types",a={unversionedId:"user-guides/processors/custom-types",id:"user-guides/processors/custom-types",title:"Custom Types",description:"BuildFlow supports using custom types for both the input and your output of the processor. If you are receiving or writing a JSON payload you can simply use a dataclass to get automatic serialization and deserialization.",source:"@site/docs/user-guides/processors/custom-types.md",sourceDirName:"user-guides/processors",slug:"/user-guides/processors/custom-types",permalink:"/docs/user-guides/processors/custom-types",draft:!1,editUrl:"https://github.com/launchflow/buildflow-docs/tree/main/docs/user-guides/processors/custom-types.md",tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Async Processors",permalink:"/docs/user-guides/processors/async-processors"},next:{title:"Autoscaling Options",permalink:"/docs/user-guides/processors/auto-scaling-options"}},u={},p=[{value:"For Pipelines",id:"for-pipelines",level:2},{value:"For Collectors",id:"for-collectors",level:2},{value:"For Endpoints",id:"for-endpoints",level:2},{value:"What if a dataclass isn&#39;t enough?",id:"what-if-a-dataclass-isnt-enough",level:2}],l={toc:p},c="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,n.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-types"},"Custom Types"),(0,r.kt)("p",null,"BuildFlow supports using custom types for both the input and your output of the processor. If you are receiving or writing a JSON payload you can simply use a ",(0,r.kt)("inlineCode",{parentName:"p"},"dataclass")," to get automatic serialization and deserialization."),(0,r.kt)("p",null,"For outputs this feature is what powers our schema validation, type checking, and resource creation. When you specify the output type of your pipeline we can automatically create the resource for you, and perform checks to ensure that the data you are sending is valid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass InputType:\n    a: int\n\n@dataclass\nclass OutputType:\n    b: int\n\n@app.pipeline(source=Primitive(...), sink=Primitive(...))\nasync def my_pipeline(elem: InputType) -> OutputType:\n    return(OutputType(b=elem.a + 1))\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"If you do not provide a type hint you for the input will receive the raw data from the source. For more info on what this is see the ",(0,r.kt)("a",{parentName:"p",href:"../../category/primitives"},"Primitives")," section for the specific source and sink you are using. If you do not provide a type hint for the output you will get no runtime checks to verify it is compatible with your source.")),(0,r.kt)("h2",{id:"for-pipelines"},"For Pipelines"),(0,r.kt)("p",null,"For pipelines the input type defines what data time is coming from your sink, and the output type defines what will be written to your sink."),(0,r.kt)("h2",{id:"for-collectors"},"For Collectors"),(0,r.kt)("p",null,"For collectors the input type defines the JSON payload that is expected from the HTTP request. The output type defines what will be written to your sink."),(0,r.kt)("h2",{id:"for-endpoints"},"For Endpoints"),(0,r.kt)("p",null,"For endpoints the input type defines the JSON payload that is expected from the HTTPrequest. The output type defines the JSON payload that will be sent back in the response."),(0,r.kt)("h2",{id:"what-if-a-dataclass-isnt-enough"},"What if a dataclass isn't enough?"),(0,r.kt)("p",null,"If you need any custom serialization or deserialzation you can provide a custom type as well. All you need to do is have your custom type provide a method that tell us how to serialize or deserialize the type."),(0,r.kt)("p",null,"The method you need to implement will be dependent on the resource you are using. For example if you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"GCPPubSubSubscription")," as a source you can add a ",(0,r.kt)("inlineCode",{parentName:"p"},"from_bytes")," class method to have automatic deserialization. If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"BigQueryTable")," as a sink you can add a ",(0,r.kt)("inlineCode",{parentName:"p"},"to_json")," instance method to have automatic serialization."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"../../category/primitives"},"Primitives")," section for your specific source and sink for more info."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nclass CustomType:\n    def __init__(self, decoded_data: str):\n        self.decoded_data = str\n\n    @classmethod\n    def from_bytes(cls, data: bytes):\n        return cls(data.decode())\n\n    def to_json(self):\n        return {"decoded_data": self.decoded_data}\n\n@app.pipeline(source=Primitive(...), sink=Primitive(...))\nasync def my_pipeline(elem: CustomType) -> CustomType:\n    return elem\n')))}d.isMDXComponent=!0}}]);